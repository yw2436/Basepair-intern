#! /usr/bin/env python

# Copyright 2011 Martin C. Frith

# Read FASTA-format DNA sequences, and write them with Cs and Gs
# replaced by symbols indicating methylation rates.

# The "g" symbols indicate the methylation rate of the c in the
# opposite strand.

# The sequences are first converted to uppercase, so we can use
# lowercase letters for methylation symbols.

# The symbols actually indicate bisulfite conversion rates.
# Conversion rate = (1 - methylation rate) * conversion efficiency.
# Typically, conversion efficiency ~= 0.99.

# "c"       "g"       Conversion   Probability in   Probability in
# symbol:   symbol:   rate:        cg context:      non-cg context:
# C         G         0.99         0.1              0.96
# c         g         0.9          0.1              0.01
# d         h         0.8          0.1              0.01
# v         b         0.5          0.1              0.01
# t         a         0            0.6              0.01

import fileinput, optparse, os, random, signal, sys

def fastaInput(lines):
    title = ""
    for line in lines:
        line = line.rstrip()
        if line.startswith(">"):
            if title: yield title, seq
            seq = []
            title = line
        else:
            seq.extend(line.upper())
    if title: yield title, seq

def writeFasta(title, seq):
    print title
    linesize = 50
    seqlen = len(seq)
    beg = 0
    while beg < seqlen:
        end = beg + linesize
        print "".join(seq[beg:end])
        beg = end

def fastaMethylSim(opts, args):
    random.seed(1414)  # make it an option?

    for title, seq in fastaInput(fileinput.input(args)):
        seqlen = len(seq)
        oldIndex = -1
        oldBase = ""
        newIndex = 0
        while oldIndex < seqlen:
            if newIndex < seqlen: newBase = seq[newIndex]
            else: newBase = ""
            if oldBase == "C":
                if newBase == "G":
                    r = random.random()
                    if   r < 0.6: seq[oldIndex] = "t"
                    elif r < 0.7: seq[oldIndex] = "v"
                    elif r < 0.8: seq[oldIndex] = "d"
                    elif r < 0.9: seq[oldIndex] = "c"
                    r = random.random()
                    if   r < 0.6: seq[newIndex] = "a"
                    elif r < 0.7: seq[newIndex] = "b"
                    elif r < 0.8: seq[newIndex] = "h"
                    elif r < 0.9: seq[newIndex] = "g"
                else:
                    r = random.random()
                    if   r < 0.01: seq[oldIndex] = "t"
                    elif r < 0.02: seq[oldIndex] = "v"
                    elif r < 0.03: seq[oldIndex] = "d"
                    elif r < 0.04: seq[oldIndex] = "c"
            elif newBase == "G":
                r = random.random()
                if   r < 0.01: seq[newIndex] = "a"
                elif r < 0.02: seq[newIndex] = "b"
                elif r < 0.03: seq[newIndex] = "h"
                elif r < 0.04: seq[newIndex] = "g"
            oldIndex = newIndex
            oldBase = newBase
            newIndex += 1
        writeFasta(title, seq)

if __name__ == "__main__":
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)  # avoid silly error message

    usage = "%prog fastaFile(s)"
    description = "Randomly assign a methylation rate to each cytosine."
    op = optparse.OptionParser(usage=usage, description=description)
    opts, args = op.parse_args()

    try: fastaMethylSim(opts, args)
    except KeyboardInterrupt: pass  # avoid silly error message
    except Exception, e:
        prog = os.path.basename(sys.argv[0])
        sys.exit(prog + ": error: " + str(e))
